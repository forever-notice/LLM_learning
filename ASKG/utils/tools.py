import torch
import numpy as np
import matplotlib.pyplot as plt

def load_clip_features(file_path):
    """
    Load CLIP text features from the specified TAR file.
    
    Args:
        file_path (str): Path to the TAR file containing CLIP features
        
    Returns:
        torch.Tensor: The loaded features tensor
    """
    print(f"Loading features from {file_path}...")
    features = torch.load(file_path)
    return features

def visualize_features(features):
    """
    Visualize feature statistics and distribution.
    
    Args:
        features (torch.Tensor): CLIP text features tensor
    """
    # Convert to numpy for easier manipulation
    if isinstance(features, torch.Tensor):
        features_np = features.numpy()
    else:
        features_np = features
    
    # Get dimensions
    shape = features_np.shape
    print(f"Feature tensor shape: {shape}")
    
    # Calculate basic statistics
    mean_val = np.mean(features_np)
    std_val = np.std(features_np)
    min_val = np.min(features_np)
    max_val = np.max(features_np)
    
    print(f"Statistics:")
    print(f"  Mean: {mean_val:.4f}")
    print(f"  Std: {std_val:.4f}")
    print(f"  Min: {min_val:.4f}")
    print(f"  Max: {max_val:.4f}")
    
    # Plot mean feature vector across classes
    if len(shape) >= 2:
        plt.figure(figsize=(10, 6))
        mean_features = np.mean(features_np, axis=0)
        plt.plot(mean_features.flatten())
        plt.title('Mean Feature Values Across Classes')
        plt.xlabel('Feature Dimension')
        plt.ylabel('Value')
        plt.grid(True)
        plt.savefig('ASKG/mean_features.png')
        print(f"Mean feature plot saved to mean_features.png")
    
    # Plot feature similarity matrix if there are multiple classes
    if shape[0] > 1:
        plt.figure(figsize=(10, 8))
        # Calculate similarity matrix (dot product of normalized features)
        if len(shape) == 3:
            # If we have a 3D tensor (classes, templates, features)
            # Reshape to (classes, templates*features)
            reshaped = features_np.reshape(shape[0], -1)
            # Normalize each row
            norms = np.linalg.norm(reshaped, axis=1, keepdims=True)
            normalized = reshaped / norms
            similarity = np.dot(normalized, normalized.T)
        else:
            # For 2D tensor (classes, features)
            norms = np.linalg.norm(features_np, axis=1, keepdims=True)
            normalized = features_np / norms
            similarity = np.dot(normalized, normalized.T)
        
        plt.imshow(similarity, cmap='viridis')
        plt.colorbar()
        plt.title('Feature Similarity Matrix')
        plt.savefig('similarity_matrix.png')
        print(f"Similarity matrix plot saved to similarity_matrix.png")

def main():
    # Path to the TAR file generated by the text2feature script
    features_file = "ASKG/data/classes_feats_askg_ntu.tar"
    
    try:
        # Load the features
        features = load_clip_features(features_file)
        
        # Print tensor info
        print(f"Successfully loaded features tensor.")
        print(f"Tensor shape: {features.shape}")
        print(f"Tensor type: {features.dtype}")
        
        # Optional: Display some sample values
        print("\nSample feature values (first class, first 5 dimensions):")
        if len(features.shape) == 3:
            print(features[0, 0, :5])  # First class, first template, first 5 dimensions
        else:
            print(features[0, :5])  # First class, first 5 dimensions
        
        # Visualize the features
        visualize_features(features)
        
        # Example of how to use these features for a downstream task
        print("\nExample: Calculate cosine similarity between first two classes")
        if len(features.shape) == 3:
            # If we have (classes, templates, features)
            # Take the mean across templates for each class
            class_features = features.mean(dim=1)
        else:
            class_features = features
            
        # Calculate cosine similarity between first two classes
        if len(class_features) >= 2:
            class_0 = class_features[0] / torch.norm(class_features[0])
            class_1 = class_features[1] / torch.norm(class_features[1])
            similarity = torch.dot(class_0, class_1).item()
            print(f"Cosine similarity between class_0 and class_1: {similarity:.4f}")
        
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()